<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>